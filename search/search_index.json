{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Liberty Web Docs Welcome to the LibertyBans Web Interface Documentation. Installation Guide Download the latest version of Liberty Web here Create a new folder in which you will run your Liberty Web server (If you are using a shared hosting panel such as Pterodactyl simply upload the jar to your server) Copy your LibertyBans plugin folder and place it in the same directory as your Liberty Web jar (the plugin folder should be configured with the external database connection credentials) Start the Liberty Web jar java -jar Liberty_Web-VERSION.jar , when you start Liberty Web for the first time a config.yml file will be created which you can then configure. The config looks something like this: server: # On what port the server will run port: 8080 host: \"0.0.0.0\" # Cache configuration caffeine: # Some usernames aren't saved in the database, so we must retrieve them using Mojang's API # The provided configuration should be suitable for most users mojang: # Maximum amount of usernames to cache maxSize: 150 # After what time cache record will expire expiration: \"10m\" After you're done editing your config.yml start Liberty Web once again, on the second startup a new folder called frontend will be created. In this folder you can edit or completely change the style of your website to suit your needs. If you wish to create a completely new frontend you should learn some more about the backend on this guide . You are done, you can now view your punishments online. Please note that this is meant to be a public facing website to allow all your players to publicly view your server's punishments. Some features meant for administration use of the server should be added in future updates so stay tuned. NOTE: It is highly recommended to create a new user with read-only access to your punishments database. Reverse Proxy After you setup Libertybans Web, you will probably want it to be available to https, on a domain. A reverse proxy allows you to run infinite web servers on the same port by proxying the requests. The following are the requirements for doing so: A VPS/Dedicated Server. Basic knowledge with linux. A (sub)domain. You are not able to do that on any hosting with a simple panel like pterodactyl. Run LibertyWeb on a port that is not 443 or 80, as they will be used by the reverse proxy. Running LibertyWeb on the same machine (very recommended, but not required). Installing NGINX Note: You do not need to install it if you are running pterodactyl for example. The following is how to install Nginx on Debian-Based linux distributions. sudo apt update sudo apt-get install nginx sudo systemctl enable --now nginx sudo systemctl start nginx Run the following to check if Nginx was installed & running properly: curl 127.0.0.1:80 If it prints an HTML, then it's working properly. Installing certbot The following is how to install certbot on Debian-Based linux distributions. sudo apt update sudo apt install -y certbot sudo apt install -y python3-certbot-nginx Creating a Certificate For HTTPS to be secure, a certificate is required. You need to do the following before proceeding. Set the domain you want to use to A record, and set the IP to your VPS/Dedicated Server IP. If you're using CloudFlare, disable proxy mode (the cloud icon) unless you know what you're doing. Make sure the port 443 and 80 are allowed through your firewall (443 is required for the web server to stay working.) Run the following command to create the certificate: certbot certonly --nginx -d <DOMAIN> Replace with your domain or subdomain. Creating the NGINX configuration file. SFTP into your machine. Go to this directory /etc/nginx/sites-available and create a new file and call it libertyweb.conf Open the file and set the file content to this, replace with your domain, and with the port running LibertyWeb. server { listen 443 ssl; server_name <DOMAIN>; ssl_certificate /etc/letsencrypt/live/<DOMAIN>/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/<DOMAIN>/privkey.pem; location / { proxy_pass http://<HOST>:<PORT>; proxy_set_header Host $host; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } If LibertyWeb is not on the same machine, replace 127.0.0.1 with the IP required to reach it. Enabling Configuration The final step is to enable your NGINX configuration and restart it. sudo ln -s /etc/nginx/sites-available/libertyweb.conf /etc/nginx/sites-enabled/libertyweb.conf sudo systemctl restart nginx Done! It should be accessible from your domain now, with https!","title":"Liberty Web Docs"},{"location":"#liberty-web-docs","text":"Welcome to the LibertyBans Web Interface Documentation.","title":"Liberty Web Docs"},{"location":"#installation-guide","text":"Download the latest version of Liberty Web here Create a new folder in which you will run your Liberty Web server (If you are using a shared hosting panel such as Pterodactyl simply upload the jar to your server) Copy your LibertyBans plugin folder and place it in the same directory as your Liberty Web jar (the plugin folder should be configured with the external database connection credentials) Start the Liberty Web jar java -jar Liberty_Web-VERSION.jar , when you start Liberty Web for the first time a config.yml file will be created which you can then configure. The config looks something like this: server: # On what port the server will run port: 8080 host: \"0.0.0.0\" # Cache configuration caffeine: # Some usernames aren't saved in the database, so we must retrieve them using Mojang's API # The provided configuration should be suitable for most users mojang: # Maximum amount of usernames to cache maxSize: 150 # After what time cache record will expire expiration: \"10m\" After you're done editing your config.yml start Liberty Web once again, on the second startup a new folder called frontend will be created. In this folder you can edit or completely change the style of your website to suit your needs. If you wish to create a completely new frontend you should learn some more about the backend on this guide . You are done, you can now view your punishments online. Please note that this is meant to be a public facing website to allow all your players to publicly view your server's punishments. Some features meant for administration use of the server should be added in future updates so stay tuned. NOTE: It is highly recommended to create a new user with read-only access to your punishments database.","title":"Installation Guide"},{"location":"#reverse-proxy","text":"After you setup Libertybans Web, you will probably want it to be available to https, on a domain. A reverse proxy allows you to run infinite web servers on the same port by proxying the requests. The following are the requirements for doing so: A VPS/Dedicated Server. Basic knowledge with linux. A (sub)domain. You are not able to do that on any hosting with a simple panel like pterodactyl. Run LibertyWeb on a port that is not 443 or 80, as they will be used by the reverse proxy. Running LibertyWeb on the same machine (very recommended, but not required).","title":"Reverse Proxy"},{"location":"#installing-nginx","text":"Note: You do not need to install it if you are running pterodactyl for example. The following is how to install Nginx on Debian-Based linux distributions. sudo apt update sudo apt-get install nginx sudo systemctl enable --now nginx sudo systemctl start nginx Run the following to check if Nginx was installed & running properly: curl 127.0.0.1:80 If it prints an HTML, then it's working properly.","title":"Installing NGINX"},{"location":"#installing-certbot","text":"The following is how to install certbot on Debian-Based linux distributions. sudo apt update sudo apt install -y certbot sudo apt install -y python3-certbot-nginx","title":"Installing certbot"},{"location":"#creating-a-certificate","text":"For HTTPS to be secure, a certificate is required. You need to do the following before proceeding. Set the domain you want to use to A record, and set the IP to your VPS/Dedicated Server IP. If you're using CloudFlare, disable proxy mode (the cloud icon) unless you know what you're doing. Make sure the port 443 and 80 are allowed through your firewall (443 is required for the web server to stay working.) Run the following command to create the certificate: certbot certonly --nginx -d <DOMAIN> Replace with your domain or subdomain.","title":"Creating a Certificate"},{"location":"#creating-the-nginx-configuration-file","text":"SFTP into your machine. Go to this directory /etc/nginx/sites-available and create a new file and call it libertyweb.conf Open the file and set the file content to this, replace with your domain, and with the port running LibertyWeb. server { listen 443 ssl; server_name <DOMAIN>; ssl_certificate /etc/letsencrypt/live/<DOMAIN>/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/<DOMAIN>/privkey.pem; location / { proxy_pass http://<HOST>:<PORT>; proxy_set_header Host $host; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } If LibertyWeb is not on the same machine, replace 127.0.0.1 with the IP required to reach it.","title":"Creating the NGINX configuration file."},{"location":"#enabling-configuration","text":"The final step is to enable your NGINX configuration and restart it. sudo ln -s /etc/nginx/sites-available/libertyweb.conf /etc/nginx/sites-enabled/libertyweb.conf sudo systemctl restart nginx","title":"Enabling Configuration"},{"location":"#done","text":"It should be accessible from your domain now, with https!","title":"Done!"},{"location":"endpoints/","text":"Endpoints Here you can better understand the Rest API for Liberty Web and utilize them to create your own frontend or other software. Punishment Endpoint This endpoint returns punishments by type using a pagination system. You can access it using the punishments/{punishmentType}/{pageNumber} url. The {punishmentType} variable is what type of punishment you want to query. The types are: - ban - mute - warn - kick The {pageNumber} is just the number of the page you want to view. The endpoint responds in some JSON that looks like this: { \"morePages\":false, \"punishments\":[ { \"victimUuid\":\"960fdc33-e2d3-4b1e-9957-9519659f9784\", \"victimUsername\":\"computer\", \"operatorUuid\":\"00000000-0000-0000-0000-000000000000\", \"operatorUsername\":\"Console\", \"reason\":\"flying 5d\", \"active\":false, \"start\":1693683950, \"end\":0, \"label\":\"Permanent\" } ] } The morePages boolean signals if there are any more pages. For example if you query punishments/ban/3 and the pageNumber is true there is at least one more page available, if false you have reached the end. punishments is a JSON array of objects of punishments. Most of the object's values are self explanatory other then the end , if end is 0 that means that the punishment will never expire. If the operatorUuid is 00000000-0000-0000-0000-000000000000 that means the operator is the console. Statistics Endpoint This endpoint tells you the amount of total punishments there are. You can access it with the url stats/{type} . The type can be one of the following: - all (returns the total sum of all punishments) - ban - mute - warn - kick The endpoint responds in very short JSON {\"stats\":1} stats of course being the number of punishments queried.","title":"Endpoints"},{"location":"endpoints/#endpoints","text":"Here you can better understand the Rest API for Liberty Web and utilize them to create your own frontend or other software.","title":"Endpoints"},{"location":"endpoints/#punishment-endpoint","text":"This endpoint returns punishments by type using a pagination system. You can access it using the punishments/{punishmentType}/{pageNumber} url. The {punishmentType} variable is what type of punishment you want to query. The types are: - ban - mute - warn - kick The {pageNumber} is just the number of the page you want to view. The endpoint responds in some JSON that looks like this: { \"morePages\":false, \"punishments\":[ { \"victimUuid\":\"960fdc33-e2d3-4b1e-9957-9519659f9784\", \"victimUsername\":\"computer\", \"operatorUuid\":\"00000000-0000-0000-0000-000000000000\", \"operatorUsername\":\"Console\", \"reason\":\"flying 5d\", \"active\":false, \"start\":1693683950, \"end\":0, \"label\":\"Permanent\" } ] } The morePages boolean signals if there are any more pages. For example if you query punishments/ban/3 and the pageNumber is true there is at least one more page available, if false you have reached the end. punishments is a JSON array of objects of punishments. Most of the object's values are self explanatory other then the end , if end is 0 that means that the punishment will never expire. If the operatorUuid is 00000000-0000-0000-0000-000000000000 that means the operator is the console.","title":"Punishment Endpoint"},{"location":"endpoints/#statistics-endpoint","text":"This endpoint tells you the amount of total punishments there are. You can access it with the url stats/{type} . The type can be one of the following: - all (returns the total sum of all punishments) - ban - mute - warn - kick The endpoint responds in very short JSON {\"stats\":1} stats of course being the number of punishments queried.","title":"Statistics Endpoint"},{"location":"reverse-proxy-via-caddy/","text":"Reverse Proxy setup with Caddy This page explains how to set up the web interface with a reverse proxy like Caddy , for TLS and security. You'll need: - A domain to use with the web interface. - A server running a newer version of Linux. In this guide we'll use the apt package manager, but you are free to use your own. - A running instance of the LibertyBans-Web interface. Do note, that in order for this to work, you'll have to have the reverse proxy access the running instance in a way or another. Double-check your network setup if this is possible. For help, consider joining the official discord support here . In this guide we'll cover an installation that is behind Cloudflare 's DDoS protection system. If you do not use Cloudflare, or do not want to, you are free to skip certain steps. In the guide, it will be noted where these steps are. Caddy installation First, please install Caddy, a secure web server with automatic TLS prevision. You can find help for this here . Web server setup Now if you've got Caddy installed, consider checking their official documentation before proceeding with this tutorial. It explains a lot regarding the inner workings of the webserver, and is useful knowledge in general. Also, knowing how to resolve issues will be very helpful in the long term. The documentation can be found here . To start the actual setup process, please open the caddy configuration file. There are several ways to configure caddy, in this tutorial we'll use the Caddyfile . The command to open the configuration file is sudo nano /etc/caddy/Caddyfile . Of course, you are free to use your own editor if nano isn't your preference. In this file, you'll find sections. These sections, blocks resemble certain domains, or subdomains, and essentially a working website. By default, there is will be a block with :80 . This is the default caddy page, which listens on port 80. Consider removing everything from the file, so it's empty. Tip: Clicking Ctrl + k in nano will delete the current line. This is very useful when removing large amounts of text. Adding the configuration Now, we'll add the relevant config option to make Caddy reverse proxy to our LibertyBans-Web instance. Feel free to copy the following: bans.minecraft.server { reverse_proxy 0.0.0.0:8080; } TIp: In nano to paste something use the right mause button on your mouse. After copying, do Ctrl + x , and answer y to save the current modified buffer. Then, re-start the caddy system service to apply your changes. Depending on your system, you can do this with sudo systemctl restart caddy . Setting up DNS records Now that you have a web-server running, it's time to set up a DNS record. We'll use the bans subdomain in this example, but you are free to use your root domain, or even your minecraft subdomain. Just be careful with the records. Navigate to your registrars site, in this example we'll use Cloudflare. Log in, click on your Domain, and select DNS on the left. On the DNS page, click \"Add record\" on the right. The record should look like the following: Where, bans is your custom subdomain, and 10.10.10.10 is the public IP of your server. If you do not have a static IP, there are workarounds you can do, but that is out of the scope of this tutorial. For support, consider joining the official discord here . Warning: Hosting a service without proper DDoS protection may be an issue for your infrastructure. In the bonus section of this page we'll cover how to set up Cloudflare's proxy. Consider setting it up since it's a mayor security upgrade. Setting up firewall rules So now you've got your LibertyBans-Web, your reverse proxy, and your DNS records set up. However, you still can't view the site. This is because you'll have to set up firewall records first. In this tutorial we'll use ufw , but you are free to use your own. To enable port 80 , execute the following command: sudo ufw enable 80/tcp Now, navigate to bans.example.server:80 , where bans.example.server is your subdomain. Woala, you did it! You should be greeted with the LibertyBans-Web interface gui. Warning: At this stage you do not have TLS on your subdomain. This makes it vulnerably to countless attacks. Please consider setting up TLS encryption. In the bonus section we'll set this up with Cloudflare's proxy, but you can set it up without CF's proxy as well. Bonus: Setting up TLS and Cloudflare's proxy for security Now, to make our interface work with Cloudflare, you'll have to download a package, and get a Cloudflare API key. Additionally, we'll set up TLS , since it's mainly why you decided to set the interface up with a reverse proxy, am I right? First, get the appropriate package: sudo caddy add-package github.com/caddy-dns/cloudflare This will enable us to add Cloudflare as a TLS provider. What this means essentially, is that since we'll be turning the proxy, the DDoS protection, your subdomain won't actually resolve to the IP you set it to in the real world. The package enables so using an API key you can generate a certificate, and enable TLS. Now, navigate to this site to get an API key to use with Cloudflare's DNS. There is an amazing guide about TLS that is very useful. Check it out here . You can skip the initial step of installing the package, since we've already done that in a previous step. You can also skip adding it to the ~bashrc file, and instead directly add it to the config. This should not be a security vulnerability, since the Caddyfile is only readable by root and the caddy user. But, of course you can do whatever you'd like. In case, the guide ever fails to resolve, I've documented the steps myself: On the left, click \"API Token\": Click \"Create Token\": Select the \"Edit Zone TLS\" template: Select the approporite options: Where it is really important to select both \"Edit\", and \"Read\" perms for the previously installed module to work. It is explained here . Also, 10.10.10.10 should be the public IP of your server, and the example.server is your domain. Continue to summary: And \"Create Token\": Now, here, copy your token, and write it down somewhere. Any file will do. Now, navigate back to /etc/caddy/Caddyfile , and paste in the following: bans.example.server { tls { issuer acme { dns cloudflare your-long-token resolvers 1.1.1.1 1.0.0.1 } client_auth { mode require_and_verify trusted_ca_cert_file /etc/ssl/certs/origin-pull-ca.pem } protocols tls1.2 tls1.3 } reverse_proxy 0.0.0.0:8080 { trusted_proxies 173.245.48.0/20 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 141.101.64.0/18 108.162.192.0/18 190.93.240.0/20 188.114.96.0/20 197.234.240.0/22 198.41.128.0/17 162.158.0.0/15 104.16.0.0/13 104.24.0.0/14 } } Where bans.example.server is your domain, your-long-token is the token you just created. Now, close the file with Crl + x , and select y as an option. The other options are for another feature, which is explained in the previously mentioned guide. I've documented the steps in case the guide fails to resolve. Credit can be found here . Pull the CF cert: sudo curl -o /etc/ssl/certs/origin-pull-ca.pem https://developers.cloudflare.com/ssl/static/authenticated_origin_pull_ca.pem Now, as a final step, navigate back to your DNS page, select the record we created previously, and turn the yellow cloud on. And, now, finally, restart your web server: sudo systemctl restart caddy And as a very, very last step, open port 443 and close port 80 on your firewall. Since only the CF proxies will connect to the port, you only need to allow them. sudo ufw status numbered Find the one that enables port 80, and remove it: sudo ufw delete number Where number is the number of rule you would like to delete. Allow port 443 from all cloudflare IPv4 addresses: for i in `curl https://www.cloudflare.com/ips-v4`; sudo ufw allow from $i proto tcp to any port 443; done` And if your infrastructure works with IPv6: for i in `curl https://www.cloudflare.com/ips-v6`; sudo ufw allow from $i proto tcp to any port 443; done` In any of the bove, you can replace to any with specific rules regarding which interfaces are allowed to send traffic and where. However, this is out of the scope of this tutorial, consider reading the ufw man page with man ufw . And, you are done! Navigating to bans.example.server where bans.example.server is your domain, should show a working instance, with TLS, and DDoS protection. Great job!","title":"Reverse Proxy setup with Caddy"},{"location":"reverse-proxy-via-caddy/#reverse-proxy-setup-with-caddy","text":"This page explains how to set up the web interface with a reverse proxy like Caddy , for TLS and security. You'll need: - A domain to use with the web interface. - A server running a newer version of Linux. In this guide we'll use the apt package manager, but you are free to use your own. - A running instance of the LibertyBans-Web interface. Do note, that in order for this to work, you'll have to have the reverse proxy access the running instance in a way or another. Double-check your network setup if this is possible. For help, consider joining the official discord support here . In this guide we'll cover an installation that is behind Cloudflare 's DDoS protection system. If you do not use Cloudflare, or do not want to, you are free to skip certain steps. In the guide, it will be noted where these steps are.","title":"Reverse Proxy setup with Caddy"},{"location":"reverse-proxy-via-caddy/#caddy-installation","text":"First, please install Caddy, a secure web server with automatic TLS prevision. You can find help for this here .","title":"Caddy installation"},{"location":"reverse-proxy-via-caddy/#web-server-setup","text":"Now if you've got Caddy installed, consider checking their official documentation before proceeding with this tutorial. It explains a lot regarding the inner workings of the webserver, and is useful knowledge in general. Also, knowing how to resolve issues will be very helpful in the long term. The documentation can be found here . To start the actual setup process, please open the caddy configuration file. There are several ways to configure caddy, in this tutorial we'll use the Caddyfile . The command to open the configuration file is sudo nano /etc/caddy/Caddyfile . Of course, you are free to use your own editor if nano isn't your preference. In this file, you'll find sections. These sections, blocks resemble certain domains, or subdomains, and essentially a working website. By default, there is will be a block with :80 . This is the default caddy page, which listens on port 80. Consider removing everything from the file, so it's empty. Tip: Clicking Ctrl + k in nano will delete the current line. This is very useful when removing large amounts of text.","title":"Web server setup"},{"location":"reverse-proxy-via-caddy/#adding-the-configuration","text":"Now, we'll add the relevant config option to make Caddy reverse proxy to our LibertyBans-Web instance. Feel free to copy the following: bans.minecraft.server { reverse_proxy 0.0.0.0:8080; } TIp: In nano to paste something use the right mause button on your mouse. After copying, do Ctrl + x , and answer y to save the current modified buffer. Then, re-start the caddy system service to apply your changes. Depending on your system, you can do this with sudo systemctl restart caddy .","title":"Adding the configuration"},{"location":"reverse-proxy-via-caddy/#setting-up-dns-records","text":"Now that you have a web-server running, it's time to set up a DNS record. We'll use the bans subdomain in this example, but you are free to use your root domain, or even your minecraft subdomain. Just be careful with the records. Navigate to your registrars site, in this example we'll use Cloudflare. Log in, click on your Domain, and select DNS on the left. On the DNS page, click \"Add record\" on the right. The record should look like the following: Where, bans is your custom subdomain, and 10.10.10.10 is the public IP of your server. If you do not have a static IP, there are workarounds you can do, but that is out of the scope of this tutorial. For support, consider joining the official discord here . Warning: Hosting a service without proper DDoS protection may be an issue for your infrastructure. In the bonus section of this page we'll cover how to set up Cloudflare's proxy. Consider setting it up since it's a mayor security upgrade.","title":"Setting up DNS records"},{"location":"reverse-proxy-via-caddy/#setting-up-firewall-rules","text":"So now you've got your LibertyBans-Web, your reverse proxy, and your DNS records set up. However, you still can't view the site. This is because you'll have to set up firewall records first. In this tutorial we'll use ufw , but you are free to use your own. To enable port 80 , execute the following command: sudo ufw enable 80/tcp Now, navigate to bans.example.server:80 , where bans.example.server is your subdomain. Woala, you did it! You should be greeted with the LibertyBans-Web interface gui. Warning: At this stage you do not have TLS on your subdomain. This makes it vulnerably to countless attacks. Please consider setting up TLS encryption. In the bonus section we'll set this up with Cloudflare's proxy, but you can set it up without CF's proxy as well.","title":"Setting up firewall rules"},{"location":"reverse-proxy-via-caddy/#bonus-setting-up-tls-and-cloudflares-proxy-for-security","text":"Now, to make our interface work with Cloudflare, you'll have to download a package, and get a Cloudflare API key. Additionally, we'll set up TLS , since it's mainly why you decided to set the interface up with a reverse proxy, am I right? First, get the appropriate package: sudo caddy add-package github.com/caddy-dns/cloudflare This will enable us to add Cloudflare as a TLS provider. What this means essentially, is that since we'll be turning the proxy, the DDoS protection, your subdomain won't actually resolve to the IP you set it to in the real world. The package enables so using an API key you can generate a certificate, and enable TLS. Now, navigate to this site to get an API key to use with Cloudflare's DNS. There is an amazing guide about TLS that is very useful. Check it out here . You can skip the initial step of installing the package, since we've already done that in a previous step. You can also skip adding it to the ~bashrc file, and instead directly add it to the config. This should not be a security vulnerability, since the Caddyfile is only readable by root and the caddy user. But, of course you can do whatever you'd like. In case, the guide ever fails to resolve, I've documented the steps myself: On the left, click \"API Token\": Click \"Create Token\": Select the \"Edit Zone TLS\" template: Select the approporite options: Where it is really important to select both \"Edit\", and \"Read\" perms for the previously installed module to work. It is explained here . Also, 10.10.10.10 should be the public IP of your server, and the example.server is your domain. Continue to summary: And \"Create Token\": Now, here, copy your token, and write it down somewhere. Any file will do. Now, navigate back to /etc/caddy/Caddyfile , and paste in the following: bans.example.server { tls { issuer acme { dns cloudflare your-long-token resolvers 1.1.1.1 1.0.0.1 } client_auth { mode require_and_verify trusted_ca_cert_file /etc/ssl/certs/origin-pull-ca.pem } protocols tls1.2 tls1.3 } reverse_proxy 0.0.0.0:8080 { trusted_proxies 173.245.48.0/20 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 141.101.64.0/18 108.162.192.0/18 190.93.240.0/20 188.114.96.0/20 197.234.240.0/22 198.41.128.0/17 162.158.0.0/15 104.16.0.0/13 104.24.0.0/14 } } Where bans.example.server is your domain, your-long-token is the token you just created. Now, close the file with Crl + x , and select y as an option. The other options are for another feature, which is explained in the previously mentioned guide. I've documented the steps in case the guide fails to resolve. Credit can be found here . Pull the CF cert: sudo curl -o /etc/ssl/certs/origin-pull-ca.pem https://developers.cloudflare.com/ssl/static/authenticated_origin_pull_ca.pem Now, as a final step, navigate back to your DNS page, select the record we created previously, and turn the yellow cloud on. And, now, finally, restart your web server: sudo systemctl restart caddy And as a very, very last step, open port 443 and close port 80 on your firewall. Since only the CF proxies will connect to the port, you only need to allow them. sudo ufw status numbered Find the one that enables port 80, and remove it: sudo ufw delete number Where number is the number of rule you would like to delete. Allow port 443 from all cloudflare IPv4 addresses: for i in `curl https://www.cloudflare.com/ips-v4`; sudo ufw allow from $i proto tcp to any port 443; done` And if your infrastructure works with IPv6: for i in `curl https://www.cloudflare.com/ips-v6`; sudo ufw allow from $i proto tcp to any port 443; done` In any of the bove, you can replace to any with specific rules regarding which interfaces are allowed to send traffic and where. However, this is out of the scope of this tutorial, consider reading the ufw man page with man ufw . And, you are done! Navigating to bans.example.server where bans.example.server is your domain, should show a working instance, with TLS, and DDoS protection. Great job!","title":"Bonus: Setting up TLS and Cloudflare's proxy for security"}]}